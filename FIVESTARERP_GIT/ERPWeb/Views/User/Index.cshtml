@{
    ViewBag.Title = "Dashboard";
}

<div class="card-body">
    @Html.AntiForgeryToken()
    <div class="row" style="margin-top:-40px">
        <div class="col-md-12">
            <div class="row mt-1">
                <div class="col-md-2">
                    <div class="row">
                        <div class="col-md-3" style="margin-top:5px">
                            <label class="control-label font-weight-bold float-left" for="ddlAssemblyLine">LINE</label>
                        </div>
                        <div class="col-md-9">
                            @Html.DropDownList("ddlAssemblyLine", (IEnumerable<SelectListItem>)ViewBag.ddlAssemblyLine, new { @class = "form-control text-center dashboard_input" })
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="row">
                        <div class="col-md-4" style="margin-top:5px">
                            <label class="control-label font-weight-bold float-left" for="ddlBrand">BRAND</label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="text-center dashboard_input" id="txtBrand" disabled />
                        </div>
                    </div>

                </div>
                <div class="col-md-2">
                    <div class="row">
                        <div class="col-md-4" style="margin-top:5px">
                            <label class="control-label font-weight-bold float-left" for="ddlModel">MODEL</label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="text-center dashboard_input" id="txtModel" disabled />
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row">
                        <div class="col-md-3" style="margin-top:5px">
                            <label class="control-label font-weight-bold float-left" for="ddlColor">COLOR</label>
                        </div>
                        <div class="col-md-9">
                            <input type="text" class="text-center dashboard_input" id="txtColor" disabled />
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row">
                        <div class="col-md-2" style="margin-top:5px">
                            <label class="control-label font-weight-bold float-left" for="txtTime">T&D</label>
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="text-center dashboard_input" id="txtTime" disabled />
                        </div>
                        <div class="col-md-6">
                            <input type="text" class="text-center dashboard_input" id="txtDate" disabled />
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="INPUT" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="COMPLETED" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="PENDING" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="QC_1" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="QC_2" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" value="QC_3" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" value="REPAIR DONE" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" value="REPAIR PENDING" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" value="MINI WAREHOUSE" disabled />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" id="txtLotIn" style="color: red; font-size: 30px" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" id="txtQCPass" style="color: red; font-size: 30px" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" id="txtPending" style="color: red; font-size: 30px" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtQC_1_Fail" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtQC_2_Fail" disabled />
                </div>
                <div class="col-md-1">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtQC_3_Fail" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtRepairDone" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtRepairPending" disabled />
                </div>
                <div class="col-md-2">
                    <input type="text" class="text-center dashboard_input" style="color: red; font-size: 30px" id="txtMiniWarehouse" disabled />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6">
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-4">
                            <input type="text" class="text-center dashboard_input" value="INPUT VS OUTPUT" disabled />
                        </div>
                        <div class="col-md-4"></div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-4 ">
                            <input type="text" class="text-center dashboard_input" value="REPAIR IN VS OUT" disabled />
                        </div>
                        <div class="col-md-4">

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="row">
                        <div id="barChartContainer" style="position: relative; height:40vh; width:80vw">
                            <canvas id="INPUT_OUTPUT_Bar_Chart"></canvas>
                        </div>
                    </div>
                </div>
                @*<div class="col-md-2"></div>*@
                <div class="col-md-6">
                    <div class="row">
                        <div id="chartContainer" style="position: relative; height:40vh; width:80vw">
                            <canvas id="REPAIR_IN_OUT_Bar_Chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-4">
                            <input type="text" class="text-center dashboard_input" value="QC_1" disabled />
                        </div>
                        <div class="col-md-4"></div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-4 ">
                            <input type="text" class="text-center dashboard_input" value="QC_2" disabled />
                        </div>
                        <div class="col-md-4">

                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-4 ">
                            <input type="text" class="text-center dashboard_input" value="QC_3" disabled />
                        </div>
                        <div class="col-md-4">

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="row">
                        <div id="chartContainer" style="position: relative; height:40vh; width:80vw">
                            <canvas id="QC_1_Problem_HorizontalBarChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div id="chartContainer" style="position: relative; height:40vh; width:80vw">
                            <canvas id="QC_2_Problem_HorizontalBarChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div id="chartContainer" style="position: relative; height:40vh; width:80vw">
                            <canvas id="QC_3_Problem_HorizontalBarChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{

    <script type="text/javascript">

        var ddlddlAssemblyLine = $("#ddlAssemblyLine");
        var ProblemNames = '';
        var RepetedProblems = '';
        var LotInCount = '';
        var RepairInCount = '';
        var RepairOutCount = '';
        var QCPassCount = '';
        var Hour = '';
        var assembly = '';

        $(document).ready(function () {
            $("#cw").addClass("ccc");
            initialLoad();
            setInterval('refreshPage()', 120000);
        })

        function refreshPage() {
            if (assembly !== "") {
                ddlddlAssemblyLine.val(assembly);
                initialLoad();
            }
            else {
                initialLoad();
            }
            //initialLoad();
            //location.reload();
        }

        ddlddlAssemblyLine.change(function () {
            assembly = ddlddlAssemblyLine.val();
            initialLoad();
        })

        function initialLoad() {
            loadDashboardData();
            LoadINPUT_OUTPUTBarChart();
            LoadREPAIRIN_OUTBarChart();
            LoadQC_1_Problem_HorizontalBarChart();
            LoadQC_2_Problem_HorizontalBarChart();
            LoadQC_3_Problem_HorizontalBarChart();
        }

        function loadDashboardData() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/GetAssemblyLineWiseDashboardData', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    $("#txtBrand").val(res.BrandName);
                    $("#txtModel").val(res.ModelName);
                    $("#txtColor").val(res.ColorName);
                    $("#txtTime").val(res.Time);
                    $("#txtDate").val(res.Date);
                    $("#txtLotIn").val(res.LotIn);
                    $("#txtQCPass").val(res.QCPass);
                    $("#txtPending").val(res.Pending); 
                    $("#txtQC_1_Fail").val(res.TotalQC1);
                    $("#txtQC_2_Fail").val(res.TotalQC2);
                    $("#txtQC_3_Fail").val(res.TotalQC3);
                    $("#txtRepairDone").val(res.RepairDone);
                    $("#txtRepairPending").val(res.RepairPending);
                    $("#txtMiniWarehouse").val(res.TotalMiniWarehouseReceived);
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }

        var ctx = document.getElementById('INPUT_OUTPUT_Bar_Chart').getContext('2d');
        var option2 = {
            maintainAspectRatio: false,
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'red',
                        fontSize: 14,
                        //callback: function (val) {
                        //    return Number.isInteger(val) ? val : null;
                        //}
                    },
                    gridLines: {
                        offsetGridLines: true,
                        drawBorder: false,
                        display: false,
                        //color: "black",
                        //borderDash: [8, 4],
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'TIME',
                        fontColor: 'white',
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'black',
                        fontSize: 14,
                        fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    },
                    gridLines: {
                        //borderDash: [8, 4],
                        //color: "black",
                        //offsetGridLines: true,
                        //drawBorder: true,
                        //display: true,
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'CAPACITY',
                        fontColor: 'white',
                        fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    }
                }],

            },
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgba(255, 255, 255,1.0)',
                    fontSize: 14
                },
            },
            tooltips: {
                enabled: true
            },
            hover: {
                animationDuration: 1
            },
            animation: {
                duration: 1,
                onComplete: function () {
                    var chartInstance = this.chart,
                        ctx = chartInstance.ctx;
                    ctx.textAlign = 'center';
                    ctx.fillStyle = "rgba(0, 0, 0, 1)";
                    ctx.textBaseline = 'bottom';
                    // Loop through each data in the datasets
                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            ctx.fillText(data, bar._model.x, bar._model.y);
                        });
                    });
                }
            }
        }

        function LoadINPUT_OUTPUTBarChart() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/GetINPUT_OUTPUTBarchart', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    var LotInCount = res.LotInCount;
                    var QCPassCount = res.QCPassCount;
                    var Hour = res.Hour;
                    var BarChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: Hour,
                            datasets: [{
                                label: "INPUT",
                                data: LotInCount,
                                backgroundColor: ['rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)'],
                                borderWidth: 1,
                            }, {
                                label: "COMPLETE",
                                data: QCPassCount,
                                backgroundColor: ['rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)'],
                                borderWidth: 1,
                            }]
                        },
                        options: option2
                    });
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }

        var ctx2 = document.getElementById('REPAIR_IN_OUT_Bar_Chart').getContext('2d');
        var option3 = {
            maintainAspectRatio: false,
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'red',
                        fontSize: 14,
                        //callback: function (val) {
                        //    return Number.isInteger(val) ? val : null;
                        //}
                    },
                    gridLines: {
                        offsetGridLines: true,
                        drawBorder: false,
                        display: false,
                        //color: "black",
                        //borderDash: [8, 4],
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'TIME',
                        fontColor: 'white',
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'black',
                        fontSize: 14,
                        fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    },
                    gridLines: {
                        //borderDash: [8, 4],
                        //color: "black",
                        //offsetGridLines: true,
                        //drawBorder: true,
                        //display: true,
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'CAPACITY',
                        fontColor: 'white',
                        fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    }
                }],

            },
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgba(255, 255, 255,1.0)',
                    fontSize: 14
                },
            },
            tooltips: {
                enabled: true
            },
            hover: {
                animationDuration: 1
            },
            animation: {
                duration: 1,
                onComplete: function () {
                    var chartInstance = this.chart,
                        ctx2 = chartInstance.ctx2;
                    ctx2.textAlign = 'center';
                    ctx2.fillStyle = "rgba(0, 0, 0, 1)";
                    ctx2.textBaseline = 'bottom';
                    // Loop through each data in the datasets
                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            ctx2.fillText(data, bar._model.x, bar._model.y);
                        });
                    });
                }
            }
        }

        function LoadREPAIRIN_OUTBarChart() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/GetREPAIRIN_OUTBarchart', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    var RepairInCount = res.RepairInCount;
                    var RepairOutCount = res.RepairOutCount;
                    var Hour = res.Hour;
                    var BarChart = new Chart(ctx2, {
                        type: 'bar',
                        data: {
                            labels: Hour,
                            datasets: [{
                                label: "IN",
                                data: RepairInCount,
                                backgroundColor: ['rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)', 'rgba(255, 255, 255,1.0)'],
                                borderWidth: 1,
                            }, {
                                label: "OUT",
                                data: RepairOutCount,
                                backgroundColor: ['rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)', 'rgba(255, 0, 0,1.0)'],
                                borderWidth: 1,
                            }]
                        },
                        options: option2
                    });
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }

        var QC_1_Problem_HorizontalBarChartId = document.getElementById('QC_1_Problem_HorizontalBarChart').getContext('2d');
        var QC_2_Problem_HorizontalBarChartId = document.getElementById('QC_2_Problem_HorizontalBarChart').getContext('2d');
        var QC_3_Problem_HorizontalBarChartId = document.getElementById('QC_3_Problem_HorizontalBarChart').getContext('2d');

        var option = {
            maintainAspectRatio: false,
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'red',
                        fontSize: 14,
                        callback: function (val) {
                            return Number.isInteger(val) ? val : null;
                        }
                    },
                    gridLines: {
                        offsetGridLines: true,
                        drawBorder: false,
                        display: false,
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'VALUE',
                        fontColor: 'white',
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'black',
                        fontSize: 14,
                        fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    },
                    gridLines: {
                        offsetGridLines: true,
                        drawBorder: false,
                        display: false,
                    },
                }],

            },
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgba(255, 255, 255,1.0)',
                    fontSize: 14
                },
            },
        }

        function LoadQC_1_Problem_HorizontalBarChart() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/QC_1_Problem_HorizontalBarChart', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    var ProblemNames = res.ProblemNames;
                    var RepetedProblems = res.RepetedProblems;
                    var horizontalBarChart = new Chart(QC_1_Problem_HorizontalBarChartId, {
                        type: 'horizontalBar',
                        data: {
                            labels: ProblemNames,
                            datasets: [{
                                label: "QCFail",
                                data: RepetedProblems,
                                backgroundColor: ['rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                ],
                                borderColor: 'rgba(255, 255, 255,1.0)',
                                borderWidth: 1,
                            }]
                        },
                        options: option
                    });
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }
        function LoadQC_2_Problem_HorizontalBarChart() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/QC_2_Problem_HorizontalBarChart', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    var ProblemNames = res.ProblemNames;
                    var RepetedProblems = res.RepetedProblems;
                    var horizontalBarChart = new Chart(QC_2_Problem_HorizontalBarChartId, {
                        type: 'horizontalBar',
                        data: {
                            labels: ProblemNames,
                            datasets: [{
                                label: "QCFail",
                                data: RepetedProblems,
                                backgroundColor: ['rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                ],
                                borderColor: 'rgba(255, 255, 255,1.0)',
                                borderWidth: 1,
                            }]
                        },
                        options: option
                    });
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }
        function LoadQC_3_Problem_HorizontalBarChart() {
            var data = JSON.stringify({ assemblyId: TryParseInt(ddlddlAssemblyLine.val(), 0) });
            $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/User/QC_3_Problem_HorizontalBarChart', data, getToken())).then(function (res, status) {
                if (status === "success") {
                    var ProblemNames = res.ProblemNames;
                    var RepetedProblems = res.RepetedProblems;
                    var horizontalBarChart = new Chart(QC_3_Problem_HorizontalBarChartId, {
                        type: 'horizontalBar',
                        data: {
                            labels: ProblemNames,
                            datasets: [{
                                label: "QCFail",
                                data: RepetedProblems,
                                backgroundColor: ['rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                    'rgba(255, 0, 0,1.0)',
                                ],
                                borderColor: 'rgba(255, 255, 255,1.0)',
                                borderWidth: 1,
                            }]
                        },
                        options: option
                    });
                }
            }).fail(function (error) {
                consoleLog(error);
            })
        }

    </script>

}