
@{
    ViewBag.Title = "Faulty Stock Repaired TS";
}
<div class="row">
    <div class="col-md-12">
        <div class="card shadow card-primary card-outline card-tabs" style="margin-top:-20px">
            <div class="card-header p-0 pt-1 border-bottom-0 text-sm">
                <ul class="nav nav-tabs" id="custom-tabs-two-tab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="custom-tabs-two-faultyStockAssignList-tab" data-toggle="pill" href="#custom-tabs-two-faultyStockAssignList" role="tab" aria-controls="custom-tabs-two-faultyStockAssignList" aria-selected="true">Faulty Stock Assign</a>
                    </li>
                </ul>
            </div>
            <div class="card-body shadow">
                <div class="tab-content" id="custom-tabs-two-tabContent">
                    @Html.AntiForgeryToken()
                    <div class="tab-pane fade show active" id="custom-tabs-two-faultyStockAssignList" role="tabpanel" aria-labelledby="custom-tabs-two-faultyStockAssignList-tab">
                        <div class="row" style="margin-top:-15px">
                            <div class="col-md-12">
                                <div class="card card-gray shadow">
                                    <div class="card-header">
                                        <div class="row">
                                            <div class="col-md-3">
                                            </div>
                                            <div class="col-md-6">
                                                <h5 class="text-center text-bold">
                                                    Faulty Stock Assign List
                                                </h5>
                                            </div>

                                            <div class="col-md-3">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12" style="margin-top:-15px">
                                <div class="card shadow card-navy">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12" style="margin-top:-10px">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-12 text-sm">
                                                <button type="button" class="btn btn-outline-success float-right" id="btnSave"><i class="fas fa-paper-plane"></i> Return</button>
                                            </div>
                                            <br />
                                            <br />
                                            <div class="col-md-12 text-sm" id="dataContainer">
                                                @{Html.RenderAction("CreateFaultyStockRepairedTS", new { flag = "AssignList" });}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
@section scripts{
    <script type="text/javascript">

        $(document).on('change', 'input[name="allItem"]', function () {
            var isChecked = $('input[name="allItem"]').is(":checked");
            $('input[name="item"]').prop("checked", isChecked);
            if (isChecked) {
                count = $(".tblFaultyStockAssignTS tbody tr").length;
                $(".tblFaultyStockAssignTS tbody tr").attr("data-item-row", "selected")
            }
            else {
                count = 0;
                $("input[type='number']").removeClass("error-border");
                $(".tblFaultyStockAssignTS tbody tr").attr("data-item-row", "notSelected")
            }
        })

        $(document).on('change', 'input[name="item"]', function () {
            count = 0;
            $.each($(".tblFaultyStockAssignTS tbody tr"), function (index, item) {
                if ($(this).children('td').eq(0).children('input[name="item"]').is(":checked")) {
                    count++;
                    $(this).attr("data-item-row", "selected");
                }
                else {
                    $(this).children('td').eq(9).children('input[type="number"]').removeClass("error-border");
                    $(this).children('td').eq(10).children('input[type="number"]').removeClass("error-border");
                    $(this).attr("data-item-row", "notSelected");
                }
            });
            var allChecked = $(".tblFaultyStockAssignTS tbody tr").length == count;
            $('input[name="allItem"]').prop("checked", allChecked);
        })
        function validateSubmit() {
            var isValid = true;
            var totalCheckedItems = 0;
            var invalidValue = 0;
            if ($(".tblFaultyStockAssignTS tbody").length > 0) {
                $.each($(".tblFaultyStockAssignTS tbody tr"), function (index, item) {
                    if ($(this).children('td').eq(0).children('input[name="item"]').is(":checked")) {
                        totalCheckedItems++;
                        var returnRepairedQty = $(this).children('td').eq(9).children('input[type="number"]').val();
                        var returnDamageQty = $(this).children('td').eq(10).children('input[type="number"]').val();
                        var availableStockQty = $(this).children('td').eq(8).html();
                        if (TryParseInt(returnRepairedQty, 0) < 0) {
                            $(this).children('td').eq(9).children('input[type="number"]').addClass("error-border");
                            isValid = false;
                            invalidValue++;
                        }
                        else if (TryParseInt(returnDamageQty, 0) < 0) {
                            $(this).children('td').eq(10).children('input[type="number"]').addClass("error-border");
                            isValid = false;
                            invalidValue++;
                        }
                        else {
                            if (TryParseInt(returnRepairedQty, 0) + TryParseInt(returnDamageQty, 0) > TryParseInt(availableStockQty, 0)) {
                                $(this).children('td').eq(9).children('input[type="number"]').addClass("error-border");
                                $(this).children('td').eq(10).children('input[type="number"]').addClass("error-border");
                                isValid = false;
                                invalidValue++;
                            }
                            else if (TryParseInt(returnRepairedQty, 0) + TryParseInt(returnDamageQty, 0) < TryParseInt(availableStockQty, 0)) {
                                $(this).children('td').eq(9).children('input[type="number"]').addClass("error-border");
                                $(this).children('td').eq(10).children('input[type="number"]').addClass("error-border");
                                isValid = false;
                                invalidValue++;
                            }
                            else {
                                $(this).children('td').eq(9).children('input[type="number"]').removeClass("error-border");
                                $(this).children('td').eq(10).children('input[type="number"]').removeClass("error-border");
                            }
                        }
                    }
                });
                if (totalCheckedItems == 0) {
                    isValid = false;
                    toastr.error("Please checked at least one item", null, { timeOut: 1000 });
                }
                if (invalidValue > 0) {
                    toastr.error("One/More return qty is invalid", null, { timeOut: 1000 });
                }
            }
            else {
                toastr.error("Item Not Found", null, { timeOut: 1000 });
                isValid = false;
            }
            return isValid;
        }

        $("#btnSave").click(function (e) {
            e.preventDefault();
            if (validateSubmit()) {
                bootbox.confirm("Are you sure you want to complete job?", function (result) {
                    if (result) {
                        disable("#btnSave");
                        var selectedRows = $(".tblFaultyStockAssignTS tbody tr[data-item-row='selected']");
                        var items = []; items.length = 0;
                        $.each(selectedRows, function (index, item) {
                            var tds = $(this).children('td');
                            items.push({
                                FaultyStockAssignTSId: tds.eq('2').html(),
                                RepairedQuantity: tds.eq('9').children('input[type="number"]').val(),
                                ScrapQuantity: tds.eq('10').children('input[type="number"]').val(),
                                Remarks: "Job-Done"
                            })
                        })

                        var data = JSON.stringify({ model: items });
                        $.when(postReqWithToken(dataType.applicationJson, dataType.json, type.post, '/Configuration/SaveFaultyStockItemsByAssignTS', data, getToken())).then(function (res, status) {
                            if (res == true && status === "success") {
                                toastrSuccessAlert(execuStatus.successSave);
                                //LoadDataTableForJobDone();
                                @*setTimeout(function () {
                                    redirectPage('@Url.Action("CreateRAndDTS", new { tab="JobCompleteReturnList"})')
                                }, 1000);*@
                                LoadTableData();
                            }
                            else {
                                toastrErrorAlert(execuStatus.fail);
                            }
                            enable("#btnSave");
                        }).fail(function (error) {
                            console.log(error);
                            toastrErrorAlert(execuStatus.fail);
                            enable("#btnSave");
                        })
                    } // result
                }) // bootbox
            }// validate
        })
        function LoadTableData() {
            var data = { flag: "AssignList" };
            $.when(getReqWithData('html', 'GET', '/Configuration/CreateFaultyStockRepairedTS', data)).then(function (res, status) {
                if (status === "success") {
                    $("#dataContainer").fadeOut('500', function () {
                        $("#dataContainer").empty();
                        $("#dataContainer").append(res).fadeIn('500');
                    });
                }
            }).fail(function (error) {
                console.log(error);
            });
        }
    </script>
    }

